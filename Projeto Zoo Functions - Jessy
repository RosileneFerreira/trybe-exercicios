JESSY DAMASCENO

const { species } = require('../data/zoo_data');
const data = require('../data/zoo_data');

const getSpecieNameByLocation = (local) => species.filter((specie) => specie
  .location === local).map((specie) => specie.name);

const getAnimalNameByLocation = (options, local) => {
  const objRetornado = [];
  const filterSpecie = species.filter((specie) => specie
    .location === local);
  if (options.sex) {
    filterSpecie.forEach((element) => objRetornado
      .push({ [element.name]: element.residents.filter((atual) => atual.sex === options.sex)
        .map((resident) => resident.name) }));
  } else {
    filterSpecie.forEach((element) => objRetornado
      .push({ [element.name]: element.residents.map((resident) => resident.name) }));
  }
  if (options.sorted === true) {
    objRetornado.map((element) => element[Object.keys(element)[0]].sort());
  }
  return objRetornado;
};

function getAnimalMap(options) {
  // seu código aqui
  if (!options || !options.includeNames) {
    return {
      NE: getSpecieNameByLocation('NE'),
      NW: getSpecieNameByLocation('NW'),
      SE: getSpecieNameByLocation('SE'),
      SW: getSpecieNameByLocation('SW'),
    };
  }
  return {
    NE: getAnimalNameByLocation(options, 'NE'),
    NW: getAnimalNameByLocation(options, 'NW'),
    SE: getAnimalNameByLocation(options, 'SE'),
    SW: getAnimalNameByLocation(options, 'SW'),
  };
}

module.exports = getAnimalMap;

*********************************
const { employees, species } = require('../data/zoo_data');
const data = require('../data/zoo_data');

function getEmployeesCoverage() {
  // seu código aqui
}
const findSpecie = (specieId) => species.find((specie) => specie.id === specieId);

const returnEmployee = (obj) => {
  const { id, firstName, lastName, responsibleFor: animals } = employees
    .find((employee) => employee.firstName === obj
      .name || employee.lastName === obj.name || employee.id === obj.id);
  return {
    id,
    fullName: `${firstName} ${lastName}`,
    species: animals.map((animal) => findSpecie(animal).name),
    locations: animals.map((animal) => findSpecie(animal).location),
  };
};

const verificaName = (obj) => data.employees.some(
  (pessoa) =>
    pessoa.id === obj.id
    || pessoa.firstName === obj.name
    || pessoa.lastName === obj.name,
);

const getEmployeesCoverage = (obj) => {
  if (!obj) {
    const array = [];
    employees.forEach((employee) => array.push(returnEmployee(employee)));
    return array;
  }
  if (verificaName(obj) === false) {
    throw new Error('Informações inválidas');
  }
  return returnEmployee(obj);
};

module.exports = getEmployeesCoverage;
**************************************
const { hours, species } = require('../data/zoo_data');
const data = require('../data/zoo_data');

function getSchedule(scheduleTarget) {
  // seu código aqui
const days = Object.keys(hours);
const openClose = Object.values(hours);

// console.log(days);
// console.log(openClose);

const verificaAnimal = (nome) => species.some((specie) => specie.name === nome);

const createSchedule = (nome) => {
  if (verificaAnimal(nome) === true) {
    return species.find((specie) => specie.name === nome).availability;
  }
  const schedule = days.reduce((acc, day, i) => {
    const { open, close } = openClose[i];
    return { ...acc,
      [day]: {
        officeHour: `Open from ${open}am until ${close}pm`,
        exhibition: species.filter((specie) => specie.availability
          .includes(day)).map((item) => item.name),
      },
    };
  }, {});
  schedule.Monday.officeHour = 'CLOSED';
  schedule.Monday.exhibition = 'The zoo will be closed!';
  return schedule;
};

function getSchedule(string) {
  const objeto = createSchedule(string);
  if (days.includes(string)) {
    return { [string]: objeto[string] };
  }
  if (!string || verificaAnimal(string) === false
  || !days.includes(string)) {
    return objeto;
  }
}

console.log(getSchedule('Monday'));

module.exports = getSchedule;
******************************************

